@page "/mantenimiento/registro-cuenta"
@page "/mantenimiento/registro-cuenta/{pageNumber:int}"
@inject IModalService Modal
@inject IJSRuntime js
@inject AccountServices accountService
@attribute [Authorize]
@if (isBusy)
{
    <img src="assets/images/cargar.gif" class="cargar" />

}
else
{
    <div class="app-page-title">
        <div class="page-title-wrapper">
            <div class="page-title-heading">
                <div class="page-title-icon"><i class="fa fa-cart-arrow-down  icon-gradient bg-happy-itmeo"></i></div>
                <div>
                   Cuentas
                    <div class="page-title-subheading">Lista de todos los cuentas</div>
                </div>
            </div>
            <div class="page-title-actions">
                <button class="mb-2 mr-2 btn-icon btn-shadow btn-outline-2x btn btn-outline-info" @onclick="@(async() => await modalCuenta())">
                    <i class="fas fa-plus"></i>Agregar  Cuentas
                </button>
            </div>

        </div>
    </div>

    <div class="main-card mb-3 card">
        <div class="card-body" style="padding-top:0px !important">
            <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4">
                <div class="row" style=" padding-bottom: 15px !important;">
                    <div class="col-sm-12 col-md-4">

                    </div>

                    <div class="col-sm-12 col-md-8" style=" margin-top: 16px;">
                        <div class="row">
                            <div class="col-md-3" style="padding-right:0px !important;">

                            </div>
                            <div class="col-md-6" style="padding-left: 0px !important;">
                                <input type="text" @bind-value="Query" class="form-control" placeholder="Buscar...">

                            </div>
                            <div class="col-md-3">
                                <button class="mb-2 mr-2 btn-icon btn btn-primary" @onclick="async() => await getCuenta()"><i class="fas fa-search"></i>Buscar</button>
                            </div>
                        </div>
                    </div>
                </div><div class="row">
                    <div class="col-sm-12">
                        <table style="width: 100%;" id="example" class="table table-hover table-striped table-bordered dataTable dtr-inline" role="grid" aria-describedby="example_info">
                            <thead>
                                <tr role="row">
                                    <th class="sorting_asc" colspan="1" style="width: 121.2px;">Codigo</th>
                                    <th class="sorting" colspan="1" style="width: 193.2px;">Nombre</th>
                                    <th class="sorting" colspan="1" style="width: 84.2px;">Tipo</th>
                                    <th class="sorting" colspan="1" style="width: 41.2px;">Negocio</th>
                                    <th class="sorting" colspan="1" style="width: 65.2px;">Opciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var c in cuenta)
                                {
                                    <tr role="row" class="odd">

                                        <td class="sorting_1 dtr-control" tabindex="0">@c.Code</td>
                                        <td>@c.Name</td>
                                        <td>@c.Type</td>
                                        <td>@c.BussinessId</td>
                                     
                                        <td>
                                            <button class="mb-2 mr-2 btn-icon btn btn-success" @onclick="@(async() => await EditCuenta(c.Id))">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="mb-2 mr-2 btn-icon btn btn-danger" @onclick="@(() =>selectId(c.Id))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>


                                }


                            </tbody>
                            <tfoot>
                                <tr><th rowspan="1" colspan="1">Codigo</th><th rowspan="1" colspan="1">Nombre</th><th rowspan="1" colspan="1">Tipo</th><th rowspan="1" colspan="1">Negocio</th><th rowspan="1" colspan="1">Opciones</th></tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class="row">

                    <div class="col-sm-12 col-md-12">
                        <div class="dataTables_paginate paging_simple_numbers" id="example_paginate" style=" float: right;">
                            <ul class="pagination">
                                <li class="paginate_button page-item previous disabled" id="example_previous">
                                    <a href="#" aria-controls="example" data-dt-idx="0" tabindex="0" class="page-link">Previous</a>
                                </li>
                                @for (int i = 1; i <= totalPage; i++)
                                {
                                    int page = i;
                                    @if (page == PageNumber)
                                    {
                                        <li class="paginate_button page-item active">
                                            <button @onclick="async() => await moveToPageAsync(page) " data-dt-idx="1" disabled class="page-link">@i</button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="paginate_button page-item">
                                            <button @onclick="async() => await moveToPageAsync(page) " data-dt-idx="1" class="page-link">@i</button>
                                        </li>
                                    }

                                }
                                <li class="paginate_button page-item next" id="example_next">
                                    <a href="#" aria-controls="example" data-dt-idx="7" tabindex="0" class="page-link">Next</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
}

@code {
    private string TitleModal;
    bool isBusy = false;
    [Parameter]
    public int? PageNumber { get; set; }
    public string Query { get; set; }
    public string Filtro { get; set; }



    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    List<AccountViewModel> cuenta = new List<AccountViewModel>();
    int totalPage = 1;

    async Task getCuenta()
    {
        isBusy = true;
        var userState = authenticationState.Result;
        accountService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        if (PageNumber == null)
            PageNumber = 1;


        AccountCollectionPagingResponse result;
        if (string.IsNullOrWhiteSpace(Query))
            result = await accountService.GetAllAccountByPageAsync(PageNumber.Value);
        else
            result = await accountService.SearchAccountByPageAsync(Query, PageNumber.Value);
        if (result.Count % result.PageSize == 0)
            totalPage = result.Count / result.PageSize;
        else
            totalPage = (result.Count / result.PageSize) + 1;
        cuenta = result.Records.ToList();

        isBusy = false;
    }




    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getCuenta();
    }


    protected override async Task OnInitializedAsync()
    {

        await getCuenta();
    }


    async Task selectId(string id)
    {

        if (await js.Comfirmar("Eliminar", "Esta seguro que desea eliminar", TiposDeAlertas.error))
        {
            selectCuentaId = id;
            await DeleteCuenta();
        }
        else
        {
            await js.MostrarMensajes("UUUPS", "Cuenta sin eliminar", TiposDeAlertas.warning);
        }
    }

    async Task EditCuenta(string cuentaId)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(CrearCuenta.CuentaId), cuentaId);

        var forModal = Modal.Show<CrearCuenta>("Editar Cuentas", parameters);
        var result = await forModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }

    }
    string selectCuentaId = string.Empty;
    async Task DeleteCuenta()
    {
        isBusy = true;
        var result = await accountService.DeleteAccountAsync(selectCuentaId);
        if (result.IsSuccess)
        {
            var deleteCuenta = cuenta.SingleOrDefault(p => p.Id == selectCuentaId);
            cuenta.Remove(deleteCuenta);
            await js.AvisoAlert("Cuenta borrada con exito!", "1500", "center", TiposDeAlertas.success);
            await OnInitializedAsync();

        }
        else
        {
            await js.AvisoAlert("Error!", "1500", "center", TiposDeAlertas.error);
        }

        isBusy = false;
    }


    async Task modalCuenta()
    {
        var forModal = Modal.Show<CrearCuenta>("Crear Cuenta");
        var result = await forModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

}
